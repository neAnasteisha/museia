@using System.Security.Claims
@model List<Post>

@{
    ViewData["Title"] = "All Posts";
}

@inject museia.Services.CurrentUserService CurrentUserService
@inject museia.IService.IPostService postService

@{
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var userType = await CurrentUserService.GetCurrentUserTypeAsync();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - museia</title>
    <link rel="stylesheet" href="~/css/post.css" />
</head>
<body>
    <div style="width: 70vw; margin: 0 auto;">
        <form id="searchForm" method="get" asp-action="Index" class="m-3" style="padding-left:1.5vw;">
            <input type="text"
                   name="searchText"
                   class="form-control"
                   placeholder="Пошук"
                   style="width: 20vw; color:#959ab1"
                   value="@(ViewContext.HttpContext.Request.Query["searchText"].ToString())" />
        </form>
    </div>

    <div id="postsContainer">
        @await Html.PartialAsync("_PostsPartial", Model)
    </div>

    <script>
        async function reloadPosts() {
            const params = new URLSearchParams(window.location.search);
            const url = `/Post/PostsPartial?${params.toString()}`;
            const res = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' }, redirect: 'follow' });
            if (res.redirected) { window.location.href = res.url; return; }
            if (res.ok) {
                const html = await res.text();
                document.getElementById('postsContainer').innerHTML = html;
                initReactionForms();
            }
        }

        function initReactionForms() {
            document.querySelectorAll('.reaction-form').forEach(form => {
                const clone = form.cloneNode(true);
                form.replaceWith(clone);
                clone.addEventListener('submit', async e => {
                    e.preventDefault();
                    const btn = e.submitter;
                    const postId = clone.querySelector('input[name="postId"]').value;
                    const reactionType = btn.value;
                    const tokenInput = clone.querySelector('input[name="__RequestVerificationToken"]');

                    const fd = new FormData();
                    fd.append('postId', postId);
                    fd.append('reactionType', reactionType);
                    if (tokenInput) fd.append(tokenInput.name, tokenInput.value);

                    try {
                        const res = await fetch(clone.action, { method: 'POST', headers: { 'X-Requested-With': 'XMLHttpRequest' }, body: fd });
                        if (res.redirected) { window.location.href = res.url; return; }
                        if (res.ok) await reloadPosts(); else clone.submit();
                    } catch {
                        clone.submit();
                    }
                });
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            initReactionForms();
            document.getElementById('searchForm').addEventListener('submit', e => {
                e.preventDefault();
                const q = e.target.searchText.value;
                history.replaceState(null, '', `?searchText=${encodeURIComponent(q)}`);
                reloadPosts();
            });
        });
    </script>

    <style>
        /* Override Bootstrap focus/active shadows and outlines globally */
        .btn:focus,
        .btn:active:focus,
        .btn-link.nav-link:focus,
        .form-control:focus,
        .form-check-input:focus,
        .btn-check:focus + .btn {
            outline: none !important;
            box-shadow: none !important;
        }

        /* Remove underline from btn-link in all states */
        .btn-link,
        .btn-link:hover,
        .btn-link:focus,
        .btn-link:active {
            text-decoration: none !important;
            color: inherit !important;
        }

        /* Reaction count badges */
        .reaction-count.my-reaction {
            background-color: #a3cde1;
            color: black;
        }

        .reaction-count {
            background-color: #c9e2f5;
            color: black;
        }
    </style>
</body>
</html>
