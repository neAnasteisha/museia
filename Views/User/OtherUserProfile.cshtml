@using System.Security.Claims
@using System.Linq
@model museia.Models.ProfileViewModel

@inject museia.Services.CurrentUserService CurrentUserService

@{
    ViewData["Title"] = "Профіль " + Model.User.UserName;
    var currentUserId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    var userAvatar = string.IsNullOrEmpty(Model.User.UserAvatar)
        ? "/uploads/avatar.jpg"
        : Model.User.UserAvatar;
    var userType = await CurrentUserService.GetCurrentUserTypeAsync();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - museia</title>
    <link rel="stylesheet" href="~/css/post.css" />
</head>
<body>
    <div class="profile-header" style="text-align:center; margin-bottom:5vw;">
        <img src="@userAvatar" alt="Avatar" style="width:150px; height:150px; border-radius:50%; margin-bottom:10px;" />
        <h1>@Model.User.UserName</h1>
        @if (!string.IsNullOrEmpty(Model.User.UserDescription))
        {
            <p style="margin-top:16px;"><strong>Опис:</strong> @Model.User.UserDescription</p>
        }
    </div>

    <div style="width:70vw; margin:0 auto;">
        <div id="postsContainer">
            @await Html.PartialAsync("~/Views/Post/_PostsPartial.cshtml", Model.UserPosts)
        </div>
    </div>

    <script>
        const userPostsUrl = '@Url.Action("UserPostsPartial", "User", new { id = Model.User.Id })';
        const container = document.getElementById('postsContainer');

        container.addEventListener('submit', async e => {
          if (!e.target.classList.contains('reaction-form')) return;
          e.preventDefault();

          const form = e.target;
          const postId = form.querySelector('input[name="postId"]').value;
          const reactionType = e.submitter.value;
          const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');

          const fd = new FormData();
          fd.append('postId', postId);
          fd.append('reactionType', reactionType);
          if (tokenInput) fd.append(tokenInput.name, tokenInput.value);

          try {
            const res = await fetch(form.action, {
              method: 'POST',
              headers: { 'X-Requested-With': 'XMLHttpRequest' },
              body: fd
            });

            if (res.ok && !res.redirected) {
              const r2 = await fetch(userPostsUrl, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
              });
              if (r2.ok) {
                const html = await r2.text();
                container.innerHTML = html;
              }
            } else if (res.redirected) {
              window.location.href = res.url;
            } else {
              form.submit();
            }
          } catch {
            form.submit();
          }
        });
    </script>



    <style>
        .btn:focus,
        .btn:active:focus,
        .btn-link.nav-link:focus,
        .form-control:focus,
        .form-check-input:focus,
        .btn-check:focus + .btn {
            outline: none !important;
            box-shadow: none !important;
        }

        .btn-link,
        .btn-link:hover,
        .btn-link:focus,
        .btn-link:active {
            text-decoration: none !important;
            color: inherit !important;
        }

        .reaction-count.my-reaction {
            background-color: #a3cde1;
            color: black;
        }

        .reaction-count {
            background-color: #c9e2f5;
            color: black;
        }
    </style>
</body>
</html>

@functions {
    private string GetEmoji(Emoji reactionType) => reactionType switch
    {
        Emoji.Heart => "❤️",
        Emoji.ThumbsUp => "👍",
        Emoji.Cry => "😢",
        Emoji.Dragon => "🐉",
        Emoji.Laughing => "😹",
        Emoji.Throwing_Up => "🤮",
        Emoji.Sparkle => "✨",
        _ => string.Empty
    };
}