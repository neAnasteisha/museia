@using System.Security.Claims
@using System.Linq
@model museia.Models.ProfileViewModel

@inject museia.Services.CurrentUserService CurrentUserService

@{
    ViewData["Title"] = "Профіль";
    var currentUserId = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    var userAvatar = string.IsNullOrEmpty(Model.User.UserAvatar)
        ? "/uploads/avatar.jpg"
        : Model.User.UserAvatar;
    var userType = await CurrentUserService.GetCurrentUserTypeAsync();
}

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - museia</title>
    <link rel="stylesheet" href="~/css/profile.css" />
    <link rel="stylesheet" href="~/css/post.css" />
    <style>
        /* Прибираємо підкреслення */
        .btn-link, .btn-link span {
            text-decoration: none !important;
            color: inherit;
        }

        .reaction-count.my-reaction {
            background-color: #a3cde1;
            color: black;
        }

        .reaction-count {
            background-color: #c9e2f5;
            color: black;
        }
    </style>
</head>
<body>
    <div class="profile-header">
        <div class="profile-info">
            <img src="@userAvatar" alt="Profile Photo" class="profile-avatar" />
            <div class="profile-details">
                <h3 class="profile-username">@Model.User.UserName</h3>
                <p class="profile-email"><strong>Email:</strong> @Model.User.Email</p>
                @if (!string.IsNullOrEmpty(Model.User.UserDescription))
                {
                    <p class="profile-description"><strong>Опис:</strong> @Model.User.UserDescription</p>
                }
            </div>
        </div>
    </div>

    <div style="width:70vw; margin:0 auto;">
        <div id="postsContainer">
            @await Html.PartialAsync("~/Views/Post/_PostsPartial.cshtml", Model.UserPosts)
        </div>
    </div>

    <script>
        // Прив'язуємо AJAX-обробники до кожної форми реакції
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.reaction-form').forEach(form => {
                form.addEventListener('submit', async e => {
                    e.preventDefault();
                    const postId = form.querySelector('input[name="postId"]').value;
                    const reactionType = e.submitter.value;
                    const token = form.querySelector('input[name="__RequestVerificationToken"]')?.value;

                    const fd = new FormData();
                    fd.append('postId', postId);
                    fd.append('reactionType', reactionType);
                    if (token) fd.append('__RequestVerificationToken', token);

                    try {
                        const res = await fetch(form.action, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' },
                            body: fd
                        });
                        if (res.ok) {
                            // Перезавантажуємо сторінку, щоб побачити оновлені емоджі
                            window.location.reload();
                        } else {
                            form.submit();
                        }
                    } catch {
                        form.submit();
                    }
                });
            });
        });
    </script>
</body>

@functions {
    private string GetEmoji(Emoji reactionType) => reactionType switch
    {
        Emoji.Heart => "❤️",
        Emoji.ThumbsUp => "👍",
        Emoji.Cry => "😢",
        Emoji.Dragon => "🐉",
        Emoji.Laughing => "😹",
        Emoji.Throwing_Up => "🤮",
        Emoji.Sparkle => "✨",
        _ => string.Empty
    };
}
